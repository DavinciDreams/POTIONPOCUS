// convex/schema.ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  documents: defineTable({
    title: v.string(),
    content: v.any(), // Stores rich text content as JSON
    ownerId: v.id("users"),
    coverImageId: v.optional(v.id("_storage")), // Reference to stored image
    attachments: v.optional(v.array(v.object({
      fileId: v.id("_storage"),
      name: v.string(),
      type: v.string()
    })))
  })
    .index("by_owner", ["ownerId"])
    .index("by_creation", ["_creationTime"]),

  fileMetadata: defineTable({
    originalName: v.string(),
    contentType: v.string(),
    size: v.number(),
    documentId: v.optional(v.id("documents")) // Optional link to document
  })
});// convex/files.ts
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

export const generateUploadUrl = mutation({
  args: {},
  handler: async (ctx) => {
    return await ctx.storage.generateUploadUrl();
  }
});

export const saveFileMetadata = mutation({
  args: {
    storageId: v.id("_storage"),
    name: v.string(),
    type: v.string(),
    size: v.number(),
    documentId: v.optional(v.id("documents"))
  },
  handler: async (ctx, args) => {
    await ctx.db.insert("fileMetadata", {
      originalName: args.name,
      contentType: args.type,
      size: args.size,
      documentId: args.documentId
    });
    return args.storageId;
  }
});

export const getFileUrl = query({
  args: { storageId: v.id("_storage") },
  handler: async (ctx, args) => {
    return await ctx.storage.getUrl(args.storageId);
  }
});// convex/documents.ts
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

export const createDocument = mutation({
  args: {
    title: v.string(),
    ownerId: v.id("users")
  },
  handler: async (ctx, args) => {
    return await ctx.db.insert("documents", {
      title: args.title,
      content: { type: "doc", content: [] }, // Default empty document
      ownerId: args.ownerId
    });
  }
});

export const updateDocument = mutation({
  args: {
    id: v.id("documents"),
    content: v.any()
  },
  handler: async (ctx, args) => {
    await ctx.db.patch(args.id, {
      content: args.content
    });
  }
});

export const getDocument = query({
  args: { id: v.id("documents") },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.id);
  }
});// convex/auth.ts
import { query } from "./_generated/server";
import { v } from "convex/values";

export const checkDocumentAccess = query({
  args: { documentId: v.id("documents"), userId: v.id("users") },
  handler: async (ctx, args) => {
    const doc = await ctx.db.get(args.documentId);
    return doc?.ownerId === args.userId;
  }
});